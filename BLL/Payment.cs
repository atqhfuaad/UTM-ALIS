///////////////////////////////////////////////////////////
//  Payment.cs
//  Implementation of the Class Payment
//  Generated by Enterprise Architect
//  Created on:      29-Dec-2020 11:08:45 AM
//  Original author: 0wner
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Business;
using System.Data;
using UTMALIS_ROLLNEY.DLL.UTMALISDataSetTableAdapters;

namespace Business
{
    public class Payment
    {

        private float paymentAmount;
        private DateTime paymentDate;
        private string paymentType;
        private int paymentID;

        public Payment()
        {

        }

        ~Payment()
        {

        }


        /// 
        /// <param name="paymentID"></param>
        /// <param name="paymentType"></param>
        /// <param name="paymentDate"></param>
        /// <param name="paymentAmount"></param>

        public DataTable GetData()
        {
            PaymentTableAdapter pta = new PaymentTableAdapter();
            DataTable dt = new DataTable();
            dt = pta.GetData();
            return dt;
        }

        public void addPayment(int paymentID, string paymentType, DateTime paymentDate, float paymentAmount, int ReservationID)
        {
            PaymentTableAdapter pta = new PaymentTableAdapter();
            pta.makePayment(paymentAmount, (paymentDate).ToString(), paymentType, paymentID, ReservationID);
        }

    }//end Payment

    abstract class PaymentNotifier
    {
        private string _notification;
        private List<IReservation> _reservation = new List<IReservation>();


        public PaymentNotifier(string notification)
        {
            _notification = notification;
        }

        public void Attach(IReservation reservation)
        {
            _reservation.Add(reservation);
        }

        public void Detach(IReservation reservation)
        {
            _reservation.Remove(reservation);
        }

        public void Notify()
        {

            foreach (IReservation reservation in _reservation)
            {
                ((UReservation)reservation).Update(this);

            }
        }

        public string notification
        {
            get { return _notification; }
            set
            {
                if (_notification != value)
                {
                    _notification = value;

                }
            }
        }

        public List<IReservation> _Reservation
        {
            get { return _reservation; }
        }
    }//Payment Reservation


    ///<summary>
    ///The ConcreteSubject class
    ///</summary>
    class PaymentReason : PaymentNotifier
    {
        public PaymentReason(string type) : base(type)
        {
        }
    }

    /// <summary>
    /// The Observer interface
    /// </summary>
    interface UReservation
    {
        void Update(PaymentNotifier paymentnotifier);
    }

    /// <summary>
    /// The ConcreteObserver class
    /// </summary>
    class IReservation : UReservation
    {
        private string _paymenttype;
        private float _paymentamount;
        private int _paymentid;
        private string _message;

        public IReservation(string type, float amount, int paymentid)
        {
            _paymenttype = type;
            _paymentamount = amount;
            _paymentid = paymentid;
            _message = "";
        } // constructor

        public void Update(PaymentNotifier paymentnotifier)
        {
            _message = $"RM {_paymentamount} for payment ID {_paymentid} has been paid by {_paymenttype}" + Environment.NewLine;

        }
        public string _Message
        {
            get { return _message; }
        }
        //Update
    }
}//end namespace Business
